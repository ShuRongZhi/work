#include "com_dirs_work_JniHelper.h"

//声明函数原型
std::string JstringToString(jstring);
//全局变量
JNIEnv *g_env;
CacheManager mCache;
//计时器
TimeHelper mTime;


void Java_com_dirs_work_JniHelper_init(JNIEnv *env, jobject thisz)
{
    LOGD("初始化Native");
    //mTime.setStart();
    g_env = env;
    //mTime.setEnd();
    //LOGD("初始化Native耗时:%f",mTime.getUseTime());
}

//根据图片路径取得byte[]
jbyteArray Java_com_dirs_work_JniHelper_getImage(JNIEnv *env, jobject thisz, jstring imageID)
{
	//将jstring转换成std::String
    std::string _imageID = JstringToString(imageID);
    if(0 == _imageID.length())
    {
        LOGD("错误:必须指定图片ID!");
        return 0;
    }
    //定义指针p，并用来接受CacheMager::getMemory返回的char *
    char * p;
    p = mCache.getMemory(_imageID);
    if(NULL == p)
    {
        LOGD("指针为空!");
        return 0;
    }
    else
    {
    	//取得图片长度
        int length = mCache.getImageSize(_imageID);
        if(-1 == length)
        {
            LOGE("长度为空!");
            return 0;
        }
        else
        {
            //将char*转换成jbyte*
            jbyte *jby = (jbyte*)p;
            //创建一个jbyteArray数组
            jbyteArray jarray = env->NewByteArray(length);
            //将char里的数据复制到jarray中
            env->SetByteArrayRegion(jarray,0,length,jby);
            return jarray;
        }
    }
}



//将jstring转换为std::string
std::string JstringToString(jstring source)
{
    const char* str;
    str = g_env->GetStringUTFChars(source, false);
    std::string temp(str);
    g_env->ReleaseStringUTFChars(source,str);
    return temp;
}
